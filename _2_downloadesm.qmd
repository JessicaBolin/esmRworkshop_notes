# Download ESM output from ESGF

## Downloading CMIP6 Earth System Models

The Earth System Grid Federation (ESGF) manages the database for handling climate science data, and supports the Coupled Model Intercomparison Project, which is currently in its sixth iteration (CMIP6).

Today, we will be downloading our model outputs via the ESGF website. We will download the simulations for two models, with the following components:

| Component Name      | Variable Name                       | Description                                                                                                                            |
|---------------------|-------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|
| Activity ID         | `ScenarioMIP`                       | ScenarioMIP                                                                                                                            |
| Source ID           | `ACCESS-CM2`, `IPSL-CM6A-LR`        | Model names                                                                                                                            |
| Experiment ID       | `SSP2-4.5`, `SSP5-8.5` `historical` | Climate scenario (`historical` ranges 1850-2014; `SSPs` range 2015-2100).                                                              |
| Model variant label | `r1i1p1f1`                          | Model variant indicating the realization, initilization method, physics processes, and forcing datasets used in the model simulations. |
| Frequency           | `mon`                               | Monthly time-step                                                                                                                      |
| Variable            | `tos`                               | Sea-surface temperature                                                                                                                |

For more information on what ESM components mean, see Table 1 in [@SCHOEMAN2023].

## Download `wget` shell scripts

### Navigate to the Metagrid node

Through the website:

-   Click [here](https://esgf.github.io/index.html) to open the website
-   Click the [nodes](https://esgf.github.io/nodes.html) link to explore the different nodes available (i.e., different data servers)
-   Click a Metagrid UI node (i.e., today, we'll use [LLNL Metagrid](https://aims2.llnl.gov/search))

You are now on the main website to download CMIP6 output. Ensure CMIP6 is selected under the 'Project' heading on the top left, and filter by 'Only Globus Transferable'. On the left, there are several filters to play with.

### Filtering ESM components

From the left tab, we use the following filters to find the `wget` script for the ACCESS-CM2 historical simulation:

-   Click **\>General**, then under **Activity ID**, click **`CMIP`**.
-   Click **\>Classifications**, then under **Variable ID**, click `tos`. Under Frequency, click `mon`.
-   Click **\>Identifiers**, then under **Source ID**, click `ACCESS-CM2`. Under **Experiment ID**, click `historical`.
-   Click **\>Labels**, then under **Variant Label**, click **`r1i1p1f1`** (this is the most common variant).

![](images/filterhist.png){fig-align="center" width="266"}

### Download `wget` shell script

Then, download the shell script by clicking the **Download** icon next to the `wget` download option. This uses `wget` to download a shell script (i.e., indicated by the `.sh` file extension) that we will later use to download the file through R whilst interfacing with CDO and the command line.

![](images/downloadwget.png){fig-align="center" width="705"}

Once downloaded, move the shell script into the `/wget_scripts` folder in your project directory.

### Rinse and repeat

Now, repeat the process for the SSP2-4.5 and SSP5-8.5 scenarios for `ACCESS-CM2`, in addition to all three scenarios for `IPSL-CM6A-LR`. You will only need to change the (i) **Activity ID** from `CMIP` to `ScenarioMIP`, and (ii) **Experiment ID** filter from `historical` to `ssp245` and `ssp585`, and You will end up with six shell scripts, three for each model.

## Download `.nc` files with `wget` scripts

::: {.callout-warning collapse="true"}
# Warning: storage

In total, we are about to download eight `.nc` files that comprise 2.65 GB of data. These are just for two models and two scenarios + historical, at a monthly time-step. Storing ESM outputs can take a lot of space - for example, if you're working with daily data across multiple models and climate scenarios, you'll almost certainly need an external hard drive or other storage solution.
:::

We will use `wget` to download our files from the ESGF Metagrid.

### Define dependencies

First, we source our packages and set our directories for where our (i) `wget` scripts are stored, and (ii) where we will store the ESM outputs.

```{r, echo = F, message = F, warning = F, eval = T}
source("/Users/admin/Documents/GitHub/esmRworkshop_website/__scripts/helpers.R")
```

```{r, message = F, warning = F, eval = F}
source(paste0(getwd(), "/__scripts/helpers.R"))
```

### Prepare for parallel processing

We are harnessing the power of parallel processing to download our ESM outputs. We use `availableCores()` from the `parallelly` package to tell us how many ***available*** cores we have on our machine. I recommend to use whatever the output is minus two, so that your operating system and other background processes can continue working normally. I have 16 cores on my machine, so I'll use 14 workers.

```{r, eval = F}
parallelly::availableCores() # Output says I have 16 cores on my machine
w <- 14  # Leave two cores for other background processes
```

### Function to download files

Now, we write a function that uses the `system()` function to invoke the terminal from within R to run the `wget` script, which downloads the ESM file. First, we set our working directory to the full path where data will be stored, which we defined above as `/data`. Then, we run the `system()` function to run the `wget` script using `bash` via the terminal. Once the script has run and the file has downloaded, we set the working directory back to the root directory.

```{r, eval = F}
wget_files <- function(script) {
  setwd(paste0(pth, cmip_pth)) #set directory to where data will be stored
  system(paste0("bash ", script, " -s")) #run wget on the shell script 
  setwd(pth) #set directory back to home directory 
}

```

Here, we list all `wget` scripts that we downloaded from ESGF.

```{r}
files <- list.files(paste0(pth, wget_pth), #full path where wget scripts are stored
                    pattern = "wget", #only files with wget in the name
                    full.names = TRUE #list the full path 
                    ) 
files
```

### Run function in parallel

Now, we change to multi-session processing, where multiple workers (sessions) are used to download the files concurrently. We then run the `wget_files()` function with `future_walk()` , and use the `tictoc` package to time how long this takes. Once all files have downloaded, we change back to single-threaded processing.

```{r, eval = F}

plan(multisession, workers = w) # Change to multi-threaded processing
tic(); future_walk(files, wget_files); toc() #Run the function in parallel
plan(sequential) # Return to single threaded processing (i.e., sequential/normal)
```

> Jessie speed: 30s to 1 min

::: {.callout-caution collapse="true"}
# Download speeds

Download speeds depend on your Wifi connection, the capabilities of your local machine, and the performance of the server/node you're attempting to connect to. You can check whether ESGF servers are online [here](https://aims2.llnl.gov/nodes/).
:::

We can check the files have downloaded by...

```{r}
list.files(paste0(pth, cmip_pth))
```

Great! We have successfully downloaded our ESM outputs.

If your scripts have downloaded data for 2100-2300 (i.e., some models will do this), we can remove those files with the `rm` argument in shell:

```{r, eval = F}
system(paste0("rm ", pth, cmip_pth, "/", 
              "tos_Omon_ACCESS-CM2_ssp585_r1i1p1f1_gn_210101-230012.nc"))
system(paste0("rm ", pth, cmip_pth, "/", 
              "tos_Omon_IPSL-CM6A-LR_ssp585_r1i1p1f1_gn_210101-230012.nc"))
```

::: {.callout-caution collapse="true"}
# Beware of `rm`

`rm` is a handy function for removing files, but there is no way of retrieving them if you've accidentally removed the wrong file. So, use this function wisely and make sure you're 100% confident you're removing the correct file!
:::
